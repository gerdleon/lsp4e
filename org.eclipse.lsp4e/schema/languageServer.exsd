<?xml version='1.0' encoding='UTF-8'?>
<!-- Schema file written by PDE -->
<schema targetNamespace="org.eclipse.lsp4e" xmlns="http://www.w3.org/2001/XMLSchema">
<annotation>
      <appinfo>
         <meta.schema plugin="org.eclipse.lsp4e" id="languageServer" name="Language Server"/>
      </appinfo>
      <documentation>
         This extension point allows to define Language Servers and enable those on some content-types.
      </documentation>
   </annotation>

   <include schemaLocation="schema://org.eclipse.core.expressions/schema/expressionLanguage.exsd"/>

   <element name="extension">
      <annotation>
         <appinfo>
            <meta.element />
         </appinfo>
      </annotation>
      <complexType>
         <sequence minOccurs="1" maxOccurs="unbounded">
            <element ref="server"/>
            <element ref="contentTypeMapping"/>
         </sequence>
         <attribute name="point" type="string" use="required">
            <annotation>
               <documentation>

               </documentation>
            </annotation>
         </attribute>
         <attribute name="id" type="string">
            <annotation>
               <documentation>

               </documentation>
            </annotation>
         </attribute>
         <attribute name="name" type="string">
            <annotation>
               <documentation>

               </documentation>
               <appinfo>
                  <meta.attribute translatable="true"/>
               </appinfo>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="server">
      <complexType>
         <attribute name="id" type="string" use="required">
            <annotation>
               <documentation>
                  A string uniquely identifying this language server definition.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="label" type="string" use="required">
            <annotation>
               <documentation>

               </documentation>
            </annotation>
         </attribute>
         <attribute name="class" type="string" use="required">
            <annotation>
               <documentation>

               </documentation>
               <appinfo>
                  <meta.attribute kind="java" basedOn=":org.eclipse.lsp4e.server.StreamConnectionProvider"/>
               </appinfo>
            </annotation>
         </attribute>
         <attribute name="clientImpl" type="string">
            <annotation>
               <documentation>
                  An optional language client implementation to use as local endpoint. If undefined, the default implementation &lt;code&gt;org.eclipse.lsp4e.LanguageClientImpl&lt;/code&gt; is used. See the &lt;a href=&quot;https://github.com/eclipse-lsp4j/lsp4j/tree/main/documentation&quot;&gt;LSP4J documentation&lt;/a&gt; for more information on how to extend the Language Server Protocol.
               </documentation>
               <appinfo>
                  <meta.attribute kind="java" basedOn="org.eclipse.lsp4e.LanguageClientImpl:"/>
               </appinfo>
            </annotation>
         </attribute>
         <attribute name="serverInterface" type="string">
            <annotation>
               <documentation>
                  An optional remote server interface from which to derive the protocol messages. If undefined, the default interface &lt;code&gt;org.eclipse.lsp4j.services.LanguageServer&lt;/code&gt; is used. See the &lt;a href=&quot;https://github.com/eclipse-lsp4j/lsp4j/tree/main/documentation&quot;&gt;LSP4J documentation&lt;/a&gt; for more information on how to extend the Language Server Protocol.
               </documentation>
               <appinfo>
                  <meta.attribute kind="java" basedOn="org.eclipse.lsp4j.services.LanguageServer:"/>
               </appinfo>
            </annotation>
         </attribute>
         <attribute name="launcherBuilder" type="string">
            <annotation>
               <documentation>
                  An optional launcher builder to override &lt;code&gt;org.eclipse.lsp4j.jsonrpc.Launcher.Builder&lt;/code&gt;.
               </documentation>
               <appinfo>
                  <meta.attribute kind="java" basedOn="org.eclipse.lsp4j.jsonrpc.Launcher$Builder:"/>
               </appinfo>
            </annotation>
         </attribute>
         <attribute name="singleton" type="boolean">
            <annotation>
               <documentation>
                  Whether a single instance of this language server should be instantiated and reused for all supported files. Sort of workaround for https://github.com/Microsoft/language-server-protocol/issues/674
Since 0.10
               </documentation>
            </annotation>
         </attribute>
         <attribute name="markerAttributeComputer" type="string">
            <annotation>
               <documentation>
                  An optional marker attribute computer that will be used to add custom attributes to a org.eclipse.core.resources.IMarker for a given diagnostic being reported by the server.
               </documentation>
               <appinfo>
                  <meta.attribute kind="java" basedOn=":org.eclipse.lsp4e.IMarkerAttributeComputer"/>
               </appinfo>
            </annotation>
         </attribute>
         <attribute name="markerType" type="string">
            <annotation>
               <documentation>
                  An optional marker type that will be used as type for the markers created for the diagnostics being reported by the server. If undefined, the marker type &lt;code&gt;org.eclipse.lsp4e.diagnostic&lt;/code&gt; is used. This marker type must  have the property &quot;persistent&quot; set to false and have &quot;org.eclipse.lsp4e.diagnostic&quot; as subtype.
As an example:
&lt;code&gt;
&lt;extension
        id=&quot;com.com.xyz.marker&quot;
        name=&quot;My Custome Marker&quot;
        point=&quot;org.eclipse.core.resources.markers&quot;&gt;
    &lt;super type=&quot;com.xyz.marker&quot;/&gt;
    &lt;super type=&quot;org.eclipse.lsp4e.diagnostic&quot;/&gt;
    &lt;persistent value=&quot;false&quot;/&gt;
&lt;/extension&gt;
&lt;/code&gt;
               </documentation>
            </annotation>
         </attribute>
         <attribute name="lastDocumentDisconnectedTimeout" type="string">
            <annotation>
               <documentation>
                  Timeout in seconds after which the server should be stopped when the last buffer connected to the server is disconnected. It defaults to five seconds, that is, the server will be stopped five seconds after the last connected document is disconected.

If set to a number bigger than zero, the server will run until the timeout is reached or until LanguageServerWrapper#close is called programatically or the IDE is closed. If set to zero, it will be stopped right after its last connected document is disconnected.
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="contentTypeMapping">
      <complexType>
         <sequence>
            <element ref="enabledWhen" minOccurs="0" maxOccurs="1"/>
         </sequence>
         <attribute name="id" type="string" use="required">
            <annotation>
               <documentation>
                  Identifier of language server definition.
               </documentation>
               <appinfo>
                  <meta.attribute kind="identifier" basedOn="org.eclipse.lsp4e.languageServer/server/@id"/>
               </appinfo>
            </annotation>
         </attribute>
         <attribute name="contentType" type="string">
            <annotation>
               <documentation>

               </documentation>
               <appinfo>
                  <meta.attribute kind="identifier" basedOn="org.eclipse.core.contenttype.contentTypes/content-type/@id"/>
               </appinfo>
            </annotation>
         </attribute>
         <attribute name="languageId" type="string">
            <annotation>
               <documentation>
                  Defines the language ID that this mapping from a language server to a specific content-type should use when communicating with a language server. The language ID is used as part of the language server protocol, for example as part of the TextDocumentItem (https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#textDocumentItem) structure. In VSCode the client identifies the language ID that should be used (or the user can override that) and VSCode uses the matching language servers for that language ID. Therefore language servers sometimes use this language ID to check for the exact language type that the user/client selected for the text document and communicates this via the protocol. More details can be found here: https://code.visualstudio.com/docs/languages/identifiers
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="enabledWhen">
      <annotation>
         <documentation>
            A core Expression that controls the enablement of the ContentTypeToLanguageServer mapping
         </documentation>
      </annotation>
      <complexType>
         <choice minOccurs="0" maxOccurs="1">
            <element ref="not"/>
            <element ref="or"/>
            <element ref="and"/>
            <element ref="instanceof"/>
            <element ref="test"/>
            <element ref="systemTest"/>
            <element ref="equals"/>
            <element ref="count"/>
            <element ref="with"/>
            <element ref="resolve"/>
            <element ref="adapt"/>
            <element ref="iterate"/>
            <element ref="reference"/>
         </choice>
         <attribute name="description" type="string" use="required">
            <annotation>
               <documentation>

               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <annotation>
      <appinfo>
         <meta.section type="since"/>
      </appinfo>
      <documentation>
         [Enter the first release in which this extension point appears.]
      </documentation>
   </annotation>

   <annotation>
      <appinfo>
         <meta.section type="examples"/>
      </appinfo>
      <documentation>
         [Enter extension point usage example here.]
      </documentation>
   </annotation>

   <annotation>
      <appinfo>
         <meta.section type="apiinfo"/>
      </appinfo>
      <documentation>
         [Enter API information here.]
      </documentation>
   </annotation>

   <annotation>
      <appinfo>
         <meta.section type="implementation"/>
      </appinfo>
      <documentation>
         [Enter information about supplied implementation of this extension point.]
      </documentation>
   </annotation>


</schema>
